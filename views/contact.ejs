<%- include("layout/head.ejs") -%>
<%- include("sub/header") -%>
<main class="main contact">
	<h1>Contact me</h1>
	<% if (error) { %>
		<%- include("sub/error.ejs", {msg: error}) -%>
	<% } %>
	<form class="contact__form" action="/contact" method="POST" >

		<label for="email">
			<span style="display: flex;">Your Email Address
				<span class="contact__form__info" 
				title="Your email address will be used only to send the response."></span>
			</span>
			<input class="<%= (errors.email ? " error" :"") %>" name="email" id="email" 
			type="email" autocomplete="email" value="<%= form.email %>" 
			placeholder="jon.doe@example.com" />
					<p class="contact__field_error">
						<%= errors.email %>
					</p>
		</label>

		<label for="subject">Subject
			<input class="<%= (errors.subject ? " error" :"") %>" type="text" 
			autocomplete="off" id="subject" name="subject" maxlength="100" 
			value="<%= form.subject %>" />
			<p class="contact__field_chars_cnt" id="subject_chars_cnt"></p>
				<p class="contact__field_error">
					<%= errors.subject %>
				</p>
		</label>

		<label for="message">Message*
			<textarea class="<%= (errors.message ? " error" :"") %>" id="message"
			name="message" rows=5 minlength="10" maxlength="1000"
			><%= form.message %></textarea>
			<p class="contact__field_chars_cnt" id="message_chars_cnt"></p>
				<p class="contact__field_error">
					<%= errors.message %>
				</p>
		</label>

		<label for="reCAPTCHA">
			<div class="g-recaptcha <%= (errors.reCAPTCHA ? " error" :"") %>"
				 data-sitekey="<%= reCAPTCHAClientKey %>" id="reCAPTCHA"></div>
				<p class="contact__field_error">
					<%= errors.reCAPTCHA %>
				</p>
		</label>

		<button type="submit">
			<i class="fa fa-circle-o-notch fa-spin"></i>
			Send Message
		</button>
	</form>
	<script>

		/** @type HTMLFormElement */
		const form = document.querySelector('.contact__form');

		const fieldsMaxLen = [
			{
				name: 'subject',
				maxLen: 100
			},
			{
				name: 'message',
				maxLen: 1000
			}
		];

		for (let i = 0; i < fieldsMaxLen.length; i++) {
			const target = form.querySelector(`#${fieldsMaxLen[i].name}`);
			window.addEventListener('keyup', () => {
				updateFieldCharsCnt(fieldsMaxLen[i].name, fieldsMaxLen[i].maxLen, target);
			});
			updateFieldCharsCnt(fieldsMaxLen[i].name, fieldsMaxLen[i].maxLen, target);
		}

		function updateFieldCharsCnt(fldID, maxCnt, target) {
			if (!target) {
				target = form.querySelector('#' + fldID);
			}
			if (target.value.length > maxCnt) {
				target.value = target.value.slice(0, maxCnt);
			}
			form.querySelector(
				`#${fldID}_chars_cnt`
			).textContent = `characters ${target.value.length}/${maxCnt}`;
		}

		function validateField(targetName, value) {
			switch (targetName) {
				case 'email':
					const re = /\S+@\S+\.\S+/;
					if (value.length > 0 && !re.test(value)) {
						return 'Please enter your email address in format: yourname@example.com';
					}
					break;
				case 'subject':
					if (value.length > 100) {
						return 'Subject max allowed length is 100 characters.';
					}
					break;
				case 'message':
					if (value.length < 10) {
						return 'Please use at least 10 characters.';
					} else if (value.length > 1000) {
						return 'Subject max allowed length is 100 characters.';
					}
					break;
			}
			return '';
		}

		function setFieldError(field, error) {
			field.parentElement.querySelector('.contact__field_error').textContent = error;
			field.classList[error.length > 0 ? 'add' : 'remove']('error');
		}

		const validationTimeouts = {};
		const fieldsTouched = {};
		function onKeyUp(ev) {
			const targetName = this.name;
			clearTimeout(validationTimeouts[targetName]);

			if (!fieldsTouched[targetName] && this.value.length === 0) {
				return;
			}
			fieldsTouched[targetName] = true;

			validationTimeouts[targetName] = setTimeout(() => {
				const error = validateField(targetName, this.value);
				setFieldError(this, error);
			}, 700);
		}

		const fields = ['email', 'subject', 'message'];
		for (let i = 0; i < fields.length; i++) {
			const target = form.querySelector(`#${fields[i]}`);
			target.addEventListener('keyup', onKeyUp.bind(target));
		}


		form.querySelector("#email").addEventListener("focus", function(ev){
			const rect = ev.target.getBoundingClientRect();

			if (rect.top < 135) {
				document.body.scrollTo({
					behavior: "smooth",
					top: 135
				});
			}
		})

		form.addEventListener('submit', function (ev) {
			const invalidFields = []
			for (let i = 0; i < fields.length; i++) {
				const target = form.querySelector(`#${fields[i]}`);
				let err = validateField(target.name, target.value);
				if (err.length > 0) {
					invalidFields.push(target.id);
				}

				setFieldError(target, err);
			}

			const submitBtn = form.querySelector("button[type=submit]");
			if (invalidFields.length > 0) {
				ev.preventDefault();
				submitBtn.classList.add("error");
				var rect = form.querySelector("#"+invalidFields[0]).getBoundingClientRect();
				
				const topOffset = (document.body.scrollTop > 80 ? 6 : 4) * 16;

				document.body.scrollTo({
					behavior: "smooth",
					top:document.body.scrollTop + rect.top + topOffset
				});
				return;
			}
			submitBtn.classList.remove("error");
			submitBtn.disabled = true;
			submitBtn.classList.add("loading");
		});
	</script>
	<script src="https://www.google.com/recaptcha/api.js" async defer></script>
</main>

<%- include("layout/footer.ejs") -%>