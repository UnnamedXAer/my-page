<header class="header shadow">
	<div class="header__scheme_switch" role="button"><i class="far fa-moon"></i><i class="far fa-sun"></i></div>
	<div class="header__backdrop" onclick="hideMenu()"></div>
	<a class="header__logo" href="/#🔝" aria-label="logo"><i class="far fa-file-code fa-2x"></i></a>
	<div class="header__burger" onclick="toggleMenu(this)" role="button" tabindex="0" aria-label="trigger menu">
		<div></div>
		<div></div>
		<div></div>
	</div>
	<nav onclick="navOnClick(event)" role="menu">
		<a href="/#about📖" role="menuitem">
			About&nbsp;Me
		</a>
		<a href="/#projects💻" role="menuitem">
			Projects
		</a>
		<a href="/#socials🔗" role="menuitem">
			Socials
		</a>
		<a href="/#education🎓" role="menuitem">
			Education
		</a>
		<a href="/#skills🔨" role="menuitem">
			Skills
		</a>
		<a href="/contact📧" role="menuitem">
			Contact
		</a>
	</nav>
</header>
<div class="header_placeholder" id="🔝"></div>
<script>
	function headerResizeOnScroll() {
		if (document.body.scrollTop > 80 || document.documentElement.scrollTop > 80) {
			document.querySelector('.header').classList.add('header_small');
		} else {
			document.querySelector('.header').classList.remove('header_small');
		}
	}
	document.body.addEventListener('scroll', headerResizeOnScroll);

	function toggleMenu(burger) {
		setMenuAvailability(burger, !burger.classList.contains('active'));
	}

	function setMenuAvailability(burger, setActive) {
		const classToggleMethod = setActive ? 'add' : 'remove';
		setNavItemsAvailability(burger.nextElementSibling, setActive);

		burger.classList[classToggleMethod]('active');
		burger.nextElementSibling.classList[classToggleMethod]('active');
		burger.previousElementSibling.previousElementSibling.classList[classToggleMethod](
			'active'
		);
	}

	function setNavItemsAvailability(nav, setActive) {
		const navLinks = nav.children;
		for (let i = 0; i < navLinks.length; i++) {
			navLinks[i].setAttribute('tabIndex', setActive ? '0' : '-1');
		}
	}

	function navOnClick(ev) {
		if (window.innerWidth > 700) {
			return;
		}
		if (ev.target.nodeName === 'A') {
			setMenuAvailability(ev.currentTarget.previousElementSibling, false);
		}
	}

	function hideMenu(burger) {
		if (!burger) {
			burger = document.querySelector('.header__burger');
		}
		setMenuAvailability(burger, false);
	}

	(function () {
		window.addEventListener('resize', function (ev) {
			const burger = document.querySelector('.header__burger');
			if (window.innerWidth > 700) {
				setNavItemsAvailability(burger.nextElementSibling, true);
				return;
			}
			setMenuAvailability(burger, false);
		});

		const header = document.querySelector('.header');

		header.addEventListener('keyup', function (ev) {
			if (ev.keyCode === 27 && window.innerWidth <= 700) {
				setMenuAvailability(header.querySelector('.header__burger'), false);
			}
		});

		const burger = header.querySelector('.header__burger');
		if (window.innerWidth <= 700) {
			setMenuAvailability(burger, false);
		}

		burger.addEventListener('keyup', function (ev) {
			if (ev.keyCode === 32 || ev.keyCode === 13) {
				toggleMenu(ev.target);
				ev.preventDefault();
			}
		});

		const nav = header.querySelector('nav');
		nav.addEventListener('keyup', function (ev) {
			if (ev.target.nodeName === 'A') {
				if (ev.keyCode === 32) {
					ev.target.click();
				}
			}
		});

		const navLinks = nav.querySelectorAll('a');
		if (navLinks.length > 0) {
			navLinks[navLinks.length - 1].addEventListener('keydown', function (ev) {
				if (ev.keyCode === 9) {
					if (window.innerWidth <= 700) {
						ev.preventDefault(); // prevent from jumping to burger
						//and automatically to the next target most likely by keyup
						const bb = document.querySelector('.header__burger');
						bb.focus();
					}
					return;
				}
			});
		}
	})();
</script>
<div class="root">