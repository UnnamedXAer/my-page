#!/usr/bin/env node

require('dotenv').config();
var app = require('../app');
var debug = require('debug')('my-page:server');
var http = require('http');

const { loadState, setStateInterval } = require('../state/state');
loadState()
	.then(() => {
		console.log(new Date().toUTCString(), 'state loaded');
		server.listen(port);
	})
	.catch((err) =>
		console.error(new Date().toUTCString(), 'error while loading state:', err)
	)
	.finally(() => setStateInterval());

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		return val;
	}

	if (port >= 0) {
		return port;
	}

	return false;
}

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
}
